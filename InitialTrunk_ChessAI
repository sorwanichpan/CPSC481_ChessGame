#!/usr/bin/env python

#########################################################################
# CPSC 481: Assignment 1
# Date: 9/22/14
# Authors:  Sorasit Wanichpan (ADD YOUR NAMES)
#           Scott Blomquist
#           Scott Stetzko
#           Henry Ngo
#
# This project uses modules under open sourced licenses
#   easyAI -- MIT License (see LICENSES.txt)
#   numpy -- numpy license (see LICENSES.txt)
#
#########################################################################

import numpy as np
from easyAI import TwoPlayersGame, AI_Player, Negamax, DictTT, id_solve, df_solve
from random import randint, shuffle
from enum import Enum
import math as m
import time
import os
import sys
import argparse

# Enums:
class Piece(Enum):
    whiteKing = 1
    blackKing = 2
    whiteRook = 3

# TESTING ROOK
""" Turn this to false if you want to test King """ 
TESTINGROOK = True

# Valid movement rules
# Directions in which a piece can move on the game space
# Note: 0 -> 7 Index
# All valid moves, access array[0] and [1] respectively for [X,Y]

################################################################################
#   King Movement 
#       -Coordinates on the 2D gamespace 
#
#                  [0,1]            
#           [-1,1]       [1,1]
#      [-1,0]        K       [1,0]   
#           [-1,-1]     [1,-1] 
#                  [0,-1]
#
################################################################################

"""Updated graphical representation"""    
KINGD = list(map(np.array, [[1, 0], [1, -1], [0, -1], [-1, -1],
                            [-1, 0], [-1, 1], [0, 1], [1, 1]]))
KINGW = u'\u2654'
KINGB = u'\u265A'

################################################################################
#   Rook Movement 
#       -Coordinates on the 2D gamespace
#
#                  [0,7]            
#
#       [-7,0]       R       [7,0]   
#
#                  [0,-7]
#
################################################################################

"""Updated graphical representation"""    
ROOKD = list(map(np.array, [[0,7]]))

# Assign unicode for the Rook piece (White)
ROOKW = u'\u2656'

################################################################################

"""Fixed Chessboard orientation"""  
# lambda functions to convert "D8" into (3,7) and back...
pos2string = lambda ab: "ABCDEFGH"[ab[1]] + str(ab[0] + 1)
string2pos = lambda s: np.array([int(s[1])-1, "ABCDEFGH".index(s[0])])
#table = DictTT()

################################################################################
# Class: Chess
# Purpose: Houses the logic and structure to successfult play a constrained 
#           game of chess using only one white king and rook, and one black king
################################################################################
class Chess(TwoPlayersGame):

################################################################################    
# __init__ : Intialization of main elements
# PLEASE READ THE EASYAI DOCUMENTATION FIRST
################################################################################
    def __init__(self, players, board_size = (8, 8)):
        # self.scoring = scoring        
        # self.depth = depth
        # self.tt = tt
        # self.win_score= win_score

        # Assign players to this instance of the class
        self.players = players
        
        # Set board size attribute      
        self.board_size = board_size
        # Initialize the board to empty spaces
        self.board = np.zeros(board_size, dtype = int)        
              
        # Set the pieces in their initial positions on the board
        self.board[7, 4] = Piece.whiteKing # Instant win (1 move) (7,4)
        self.board[7, 7] = Piece.whiteRook # 7 7
        self.board[0, 3] = Piece.blackKing        

        # Assign players piece positions to their respective objects
        # player[0] = p1
        # player[1] = p2
        # pos[0] = King
        # pos[1] = Rook
        players[0].pos = ["", ""]
        players[1].pos = [""]
        players[0].pos[0] = np.array([7, 4]) # Instant win (1 move)
        players[0].pos[1] = np.array([7, 7])
        players[1].pos[0] = np.array([0, 3])
        
        # player 1 (white) starts
        self.nplayer = 1 

################################################################################
# possible_moves : returns an array of possible moves for a piece
################################################################################    
    def possible_moves(self):
        # Whose turn is it?
        # Define each color's "rules"
        # Example: if player 1 = black, then we can define valid moves for each chess piece or to determine if the King is in Check.
        # nplayer: Which player is currently playing
        if self.nplayer == 1:

            # Set current p1 king and rook positions
            startWhiteKing = self.players[0].pos[0] #white King
            startWhiteRook = self.players[0].pos[1] #white Rook
            
            # Set the current position of the black king as target of move
            target = self.players[1].pos[0] #black king
        
            # Spaces that is acquired by the target
            # If the start chess piece (white king) goes into 1 space near the black king, it will die.
            # Best for the white king to avoid the black king by 1 space.
            DANGERSPOT = [target] + [ target + a for a in KINGD]
  
            """ KING PIECE """
            # Calculating all the king's movement at this section
            kingPossible  = [startWhiteKing + a for a in KINGD] #Calculating king's movement without any restrictions
            # This elimnates off-board and occupied positions
            possible2 = [ a for a in kingPossible if (a[0] >= 0) and (a[1] >= 0) and (a[0] < 8) and (a[1] < 8) and (self.board[a[0], a[1]] == 0)]
            # # Minimum Board values ______________________|_______________|               |               |                       |
            # # Max Board values___________________________________________________________|_______________|                       |
            # # Empty space on the board___________________________________________________________________________________________|

            # # This section is a bit weird, but trust me. The numpy-arrays are complicated to delete and append elements.
            # # Here's  how i broke it down:
            # # ------------------------------------------------------------------------------
            # # Create an empty array so that I can store indices that are not valid
            index_d=[]

            # # Create an array that holds the maximum indices
            indexerK=range(len(possible2))

            # # Counter
            i=0 # King

            # # Saving all the index numbers that have a match in DANGERSPOT into index_d
            for a in possible2:
                for b in DANGERSPOT:
                    if np.array_equal(a,b):
                        index_d.append(i)
                i = i + 1

            # # Remove index_d from indexer. Indexer now has all the index numbers that we want to keep.
            if len(index_d) is not 0:
                for a in index_d:
                    indexerK.remove(a)

            # # Variables 'valids' now hold all valid and safe positions
            validsK= [ possible2[a] for a in indexerK ]

            """ ROOK PIECE """
            # Locks Rook into only moving either horizontally or vertically only.
            # Split into two axis so we can check the rows and columns individually if there is a piece blocking
            # Rook piece (Y == Rows, X == Cols)
            rookPossibleY = [[startWhiteRook[0], i]  for i in range(8)]
            rookPossibleX = [[i, startWhiteRook[1]] for i in range(8)]
            
            # This elimnates off-board and occupied positions
            """Possible moves for Rook on the Y axis (Rows)""" 
            rook_possible2Y = [ a for a in rookPossibleY if (a[0] >= 0) and (a[1] >= 0) and (a[0] < 8) and (a[1] < 8) and (self.board[a[0], a[1]] == 0)]
            # Minimum Board values ______________________|_______________|               |               |                       |
            # Max Board values___________________________________________________________|_______________|                       |
            # Empty space on the board___________________________________________________________________________________________|

            # This elimnates off-board and occupied positions
            """Possible Move for Rook on the X axis (Columns)""" 
            rook_possible2X = [ a for a in rookPossibleX if (a[0] >= 0) and (a[1] >= 0) and (a[0] < 8) and (a[1] < 8) and (self.board[a[0], a[1]] == 0)]
            # Minimum Board values ______________________|_______________|               |               |                       |
            # Max Board values___________________________________________________________|_______________|                       |
            # Empty space on the board___________________________________________________________________________________________|

            """ Scan the X axis (Columns) for obstructed moves"""
            # Store the invalid moves (Moves that will have Rook jump over another piece)
            badMoveCol = []

            # Read the positions not occupied by the Rook
            # From the beginning of the board (A) <---- ROOK ----> to the end of the board (H)
            # Add the moves that is obstructed by a piece to the invalid list if there exists a piece that obstruct the Rook on that current row
            for i in [x for x in range(0,8) if x is not startWhiteRook[1]+1]:
                if (self.board[startWhiteRook[0], i] != 0):
                    if startWhiteRook[1] < i:
                        for val in range(i+1,7):
                            badMoveCol.append([startWhiteRook[0], val])
                    elif startWhiteRook[1] > i:
                        for val in range(0,i):
                            badMoveCol.append([startWhiteRook[0], val])

            # Remove invalid moves from the list of possible moves (Rook can't jump over pieces)
            for i in badMoveCol:
                if i in rook_possible2Y:
                    rook_possible2Y.remove(i)
            """ rook_possible2Y now only contain unobstructed moves """

            """ Check for the DANGERSPOTs """
            # Saving all the index numbers that have a match in DANGERSPOT into index_d
            # This eliminates the rook occupying any of the DANGERZONE              
            index_t=[]
            # Create an array that holds the maximum indices
            indexerR=range(len(rook_possible2Y))
            # Counter
            t=0 # Rook
            for a in rook_possible2Y:
                for b in DANGERSPOT:
                    if np.array_equal(a,b):
                        index_t.append(t)
                t = t + 1
            # Remove index_d from indexer. Indexer now has all the index numbers that we want to keep.
            if len(index_t) is not 0:
                for a in index_t:
                    indexerR.remove(a)
            validRY = [ rook_possible2Y[a] for a in indexerR ] 
            """ validRY now contains all the valid column moves for the Rook """

            """ Scan the Y axis (Rows) for obstructed moves"""
            # Store the invalid moves (Moves that will have Rook jump over another piece)
            badMoveRow = []

            # Read the positions not occupied by the Rook
            # From the beginning of the board (1) <---- ROOK ----> to the end of the board (8)
            # Add the moves that is obstructed by a piece to the invalid list if there exists a piece that obstruct the Rook on that current column
            for i in [x for x in range(0,8) if x is not startWhiteRook[0]+1]:
                if (self.board[i, startWhiteRook[1]] != 0):
                    if startWhiteRook[0] < i:
                        for val in range(i+1,7):
                            badMoveRow.append([val, startWhiteRook[1]])
                    elif startWhiteRook[0] > i:
                        for val in range(0,i):
                            badMoveRow.append([val, startWhiteRook[1]])

            # Remove invalid moves from the list of possible moves (Rook can't jump over pieces)
            for i in badMoveRow:
                if i in rook_possible2X:
                    rook_possible2X.remove(i)
            """ rook_possible2X now only contain unobstructed moves """

            """ Check for the DANGERSPOTs """
            # Saving all the index numbers that have a match in DANGERSPOT into index_d
            # This eliminates the rook occupying any of the DANGERZONE              
            index_t=[]
            # Create an array that holds the maximum indices
            indexerR=range(len(rook_possible2X))
            # Counter
            t=0 # Rook
            for a in rook_possible2X:
                for b in DANGERSPOT:
                    if np.array_equal(a,b):
                        index_t.append(t)
                t = t + 1
            # Remove index_d from indexer. Indexer now has all the index numbers that we want to keep.
            if len(index_t) is not 0:
                for a in index_t:
                    indexerR.remove(a)
            validRX = [ rook_possible2X[a] for a in indexerR ]
            """ validRX now contains all the valid row moves for the Rook """  

            # Merge the two Rook valid possible moves
            validsR = validRX + validRY

            # Algorithm for the white king to get close to the black king by using distance formula
            # ------------------------------------------------------------------------------------
            # Make sure that we DO have positions that we can go too. 
            """ Need to modify for Check (Stop the Rook from zerging in on the king, we just want to use it to force a check or checkmate) """ 
            ##### ROOK ######
            if (TESTINGROOK is True):
                if len(validsR) > 0:
                    closeR = validsR[0]
                    miniR = m.sqrt(m.pow(closeR[0]-target[0],2) + m.pow(closeR[1]-target[1],2))
                    for d in validsR:
                        mini2R = m.sqrt(m.pow(d[0]-target[0],2) + m.pow(d[1]-target[1],2))
                        if mini2R<miniR:
                            miniR=mini2R
                            closeR=d
                    return[pos2string(closeR)]
                else:
                    # Return empty array when we have no more valid positions to move.
                    print("Stalemate!")
                    return[]
            ##### KING ######
            else:
                if len(validsK) > 0:
                    closeK = validsK[0]
                    miniK = m.sqrt(m.pow(closeK[0]-target[0],2) + m.pow(closeK[1]-target[1],2))
                    for d in validsK:
                        mini2K = m.sqrt(m.pow(d[0]-target[0],2) + m.pow(d[1]-target[1],2))
                        if mini2K<miniK:
                            miniK=mini2K
                            closeK=d
                    return[pos2string(closeK)]
                else:
                    # Return empty array when we have no more valid positions to move.
                    print("Stalemate!")
                    return[]

        elif self.nplayer == 2:
            # Finding the intial position of the pieces on the board
            target = self.players[0].pos[0] #White king
            start = self.players[1].pos[0] #Black King

            # Spaces that is acquired by the target
            # If the start chess piece (Black king) goes into 1 space near the white king, it will die.
            # Best for the black king to avoid the white king by 1 space.
            DANGERSPOT = [target] + [ target + a for a in KINGD]          

            #### Calculating all the king's movement at this section
            kingPossible  = [start + a for a in KINGD] #Calculating king's movement without any restrictions

            # This elimnates off-board and occupied positions
            possible2 = [ a for a in kingPossible if (a[0] >= 0) and (a[1]>= 0) and (a[0] < 8) and (a[1] < 8) and (self.board[a[0], a[1]] == 0)]
            # Minimum Board values ______________________|_______________|               |               |                       |
            # Max Board values___________________________________________________________|_______________|                       |
            # Empty space on the board___________________________________________________________________________________________|

            # This section is a bit weird, but trust me. The numpy-arrays are complicated to delete and append elements.
            # Here's  how i broke it down:
            # ------------------------------------------------------------------------------
            # Create an empty array so that I can store indices that are not valid
            index_d=[]

            # Create an array that holds the maximum indices
            indexer=range(len(possible2))

            # Counter
            i=0

            # Saving all the index numbers that have a match in DANGERSPOT into index_d
            for a in possible2:
                for b in DANGERSPOT:
                    if np.array_equal(a,b):
                        index_d.append(i)
                i = i + 1

            # Remove index_d from indexer. Indexer now has all the index numbers that we want to keep.
            if len(index_d) is not 0:
                for a in index_d:
                    indexer.remove(a)

            # Variables 'valids' now hold all valid and safe positions
            valids= [ possible2[a] for a in indexer ]
            
            # Check to see if the valid moves would put the black king in check
            # If it does it removes that move from the valid list
            #for v in valids:
            #    currentPos = self.player[1].pos[0]
            #    make_move(v)
            #    if kingInCheck() == True:
            #        valids.remove(v)
            #    make_move(currentPos)
                
            # Black king will move randomly into safe spots.
            if len(valids) > 0:
                close = valids[randint(0,len(valids)-1)]
                return[pos2string(close)]
            # Return empty array when we have no more valid positions to move.
            else:
                print("Checkmate!")
                return[]                
                       
################################################################################
# make_move : Moves a piece based on passed position
################################################################################                       
    def make_move(self, pos):
        if self.nplayer == 1:
            ### THIS PRINTS OUT KING
            if (TESTINGROOK is False):
                # After negmax finds the "best" choice, make the move
                pi, pj = self.player.pos[0] # Gets the player X,Y coordinates on the board
                self.board[pi, pj] = 0 # Changed from 3 to 0
                                       # 0 means, no piece is currently occupying that space
                self.player.pos[0] = string2pos(pos) # Gets the string (AlgoNotation) and covernts it into X,Y to change piece position
                pi, pj = self.player.pos[0]                # Get the piece's current position
                self.board[pi, pj] = Piece.whiteKing       # Place it on the ASCII board 
            ### THIS PRINTS OUT THE ROOK
            elif (TESTINGROOK is True):
                # After negmax finds the "best" choice, make the move
                pi, pj = self.player.pos[1] # Gets the player X,Y coordinates on the board
                self.board[pi, pj] = 0 # Changed from 3 to 0
                                       # 0 means, no piece is currently occupying that space
                self.player.pos[1] = string2pos(pos) # Gets the string (AlgoNotation) and covernts it into X,Y to change piece position
                pi, pj = self.player.pos[1]                # Get the piece's current position
                self.board[pi, pj] = Piece.whiteRook       # Place it on the ASCII board 

            # See if move put the king in check.
            #if kingInCheck == True:
            #   print("Black King in check")

        elif self.nplayer == 2:
            # After negmax finds the "best" choice, make the move
            pi, pj = self.player.pos[0] # Gets the player X,Y coordinates on the board
            self.board[pi, pj] = 0 # Changed from 3 to 0
                                   # 0 means, no piece is currently occupying that space
            self.player.pos[0] = string2pos(pos) # Gets the string (AlgoNotation) and covernts it into X,Y to change piece position
            pi, pj = self.player.pos[0]                # Get the piece's current position
            self.board[pi, pj] = Piece.blackKing       # Place it on the ASCII board
            
            ### We need to add a check logic -- Sorasit (9/23)
        
################################################################################            
# kingInCheck :
# This function looks at the king(s) position relative to the other teams piece positions and 
# returns 'TRUE' if the king is in check, and 'FALSE' if the king is safe from a check condition.
# Usage:
# - Call after every move to check if that move put opponnents King in check.
# - Call while a Kings best move is being determined and before that move is executed to enusre
# that the move does not put the king in a self imposed check scenario. 
################################################################################  

    #def kingInCheck(self):
        # Commented out since I did not have time to test it thouroughly yet as I am at work
        #blackKingPos = self.player[1].pos[0]
        #whiteKingPos = self.player[0].pos[0]
        #whiteRookPos = self.player[0].pos[1]
        #blackKingPossible  = [blackKingPos + a for a in KINGD]
        #if whiteRookPos[0] == blackKingPos[0] or whiteRookPos[1] == blackKingPos[1]:
        #    return True;
        #elif whiteKingPos in blackKingPossible:
        #    return True
        #else: 
        #    return False      

################################################################################
# show : prints the board
################################################################################            
    def show(self):
        print('\n' + '\n'.join(['  A B C D E F G H'] + ['12345678'[k] +  ' ' + ' '.join([['.', KINGW, KINGB, ROOKW][self.board[k, i]] 
            for i in range(self.board_size[0])])
            for k in range(self.board_size[1])] + ['']))
        time.sleep(3)
        os.system('clear')

################################################################################
# lose : checks for lose condition 
################################################################################
    def lose(self):
        return self.possible_moves() == []
        ### Need to modify it to check for checkmate status
        
################################################################################
# scoring: For the AI <-- expand??
################################################################################
    def scoring(self):
        return -100 if (self.possible_moves() == []) else 0

################################################################################        
# is_over : Check if the game is over
################################################################################
    def is_over(self):
        return self.lose()

################################################################################
# __call__ : Calls the easy AI to make a best move based on current game state
################################################################################        
    def __call__(self,game):
        """
        Returns the AI's best move given the current state of the game.
        """
        scoring = self.scoring if self.scoring else (
                       lambda g: g.scoring() ) # horrible hack
                       
        self.alpha = negamax(game, self.depth, self.depth, scoring,
                     -self.win_score, +self.win_score, self.tt)
        return game.ai_move

def main(argv):
    parser = argparse.ArgumentParser()

    parser.add_argument ("N_Turns", help="Determines the best move by thinking N turns in advance. (Default is 9)", type=int, default=9)
    # Grab the arguments
    args = parser.parse_args()
    test_mode = args.T

    ai_algo = Negamax(args.N_Turns)     # Negamax algorithm (Variantion of the Min-max)
                                        # Refer to the easyAI manual for more information
    game = Chess([AI_Player(ai_algo), AI_Player(ai_algo)], (8, 8))  
    # Player 1 _______|        |          |        |         |
    # AI1 Algo ________________|          |        |         |
    # Player 2 ___________________________|        |         |
    # AI2 Algo ____________________________________|         |
    # Gamespace dimensions __________________________________|     
    game.play(20) # Starts the game
    print("player %d loses" % (game.nplayer))

################################################################################
# Main
################################################################################
if __name__ == "__main__":
    # Takes in command line arguments
    main(sys.argv[1:])

